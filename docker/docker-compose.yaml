services:
# Webapp
  gateway:
    container_name: gateway
    image: nginx:latest
    ports:
      - 80:80
    volumes:
      - ./nginx-gateway.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend 
    networks:
      - webapp
      - backend
      - auth
  
  frontend:
    container_name: frontend
    build:
      context: ../../frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ../../frontend/src:/app/src
      - ../../frontend/node_modules:/app/node_modules
    networks:
      - webapp
# Backend
  api-gateway:
    container_name: api-gateway
    image: nginx:latest
    volumes:
      - ./nginx-api-gateway.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - song-service
    networks:
      - backend

  song-service:
    container_name: song-service
    build:
      context: ../../song-service/SongService
      dockerfile: Dockerfile
    environment:
      - CONNECTION_STRING=Host=song-db;Port=5432;Username=postgres;Password=postgres;Database=postgres
    depends_on:
      - song-db
    networks:
      - backend 

  song-db:
    container_name: song-db
    image: postgres:latest
    environment:
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432
    volumes:
      - song-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --username=postgres --dbname=postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - backend
  
# IAM
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: keycloak
      KEYCLOAK_ADMIN_PASSWORD: keycloak
      KC_HOSTNAME_URL: 'http://auth.respotify.com'
      KC_HOSTNAME_ADMIN_URL: 'http://auth.respotify.com'
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db/keycloak
    command: ["--verbose", "start-dev"]
    volumes:
      - kc-db-volume:/opt/jboss/keycloak/standalone/data
    depends_on:
      - keycloak-db
    networks:
      - auth

  keycloak-db:
    container_name: keycloak-db
    image: postgres:latest
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_PASSWORD: postgres
    volumes:
      - kc-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --username=postgres --dbname=keycloak"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - auth

volumes:
  kc-db-volume:
  song-db-volume:
networks:
  webapp:
    driver: bridge
  backend:
    driver: bridge
  auth:
    driver: bridge
